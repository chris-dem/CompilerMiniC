Parsed Successfully
[Program node : 
	ExternList : [
]
DeclarationList : [
    [ Function Defintion Node : 
        ReturnType: int 
        Identifier : addition Args : [[ Declaration Node : Identifier : c Type: int], ] 
        Body : [
        [ Body node : 
        Local Declarations : [[ Declaration Node : Identifier : x Type: int], ] 
        StatementList : [
            [Assignement node : Ident : x Expr : [[Integer literal node : Value : 0]] ], 
            [IfStatement node: Predicate : [[BinaryOperator literal node : Operator : > LHS : [[Identifier literal node : Value : c]] RHS : [ [Integer literal node : Value : 2]] ]] 
                Body : [[ Body node : Local Declarations : [] 
                StatementList : [
                    [Assignement node : Ident : x Expr : [[Integer literal node : Value : 3]] ], ] ]] 
                ElseBody : [
                    [ Body node : Local Declarations : [] StatementList : [
                        [WhileStatement node : 
                            Predicate : [[BinaryOperator literal node : Operator : > 
                            LHS : [[Identifier literal node : Value : x]] 
                            RHS : [ [Integer literal node : Value : 0]] ]] 
                            Body : [[ Body node : Local Declarations : [] 
                                StatementList : [[Assignement node : Ident : x Expr : [[BinaryOperator literal node : Operator : - LHS : [[Identifier literal node : Value : x]] RHS : [ [Integer literal node : Value : 1]] ]] ], ] ]] ], ] ]] ], [Assignement node : Ident : x Expr : [[BinaryOperator literal node : Operator : + LHS : [[Identifier literal node : Value : x]] RHS : [ [Integer literal node : Value : 4]] ]] ], [ Return Node : Expression : [BinaryOperator literal node : Operator : > LHS : [[Identifier literal node : Value : x]] RHS : [ [Floating literal node : Value : 2]] ] ], ] ]] ], 
 ]]
